{
  "info": {
    "_postman_id": "7e4d0b23-1c7d-4e44-a384-32d7f2a289cc",
    "name": "Edu Forge Notification API",
    "description": "Collection for testing Edu Forge Notification API endpoints",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Notifications",
      "item": [
        {
          "name": "Get All Notifications",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/notifications?page=1&limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["notifications"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "type",
                  "value": "SYSTEM",
                  "disabled": true
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has correct structure\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData).to.have.property('total');",
                  "    pm.expect(jsonData).to.have.property('page');",
                  "    pm.expect(jsonData).to.have.property('limit');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Notification by ID",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/notifications/:id",
              "host": ["{{baseUrl}}"],
              "path": ["notifications", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "your-notification-id",
                  "description": "Replace with a valid notification ID"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Notification has correct properties\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('title');",
                  "    pm.expect(jsonData).to.have.property('content');",
                  "    pm.expect(jsonData).to.have.property('type');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Notification",
          "request": {
            "method": "POST",
            "url": {
              "raw": "{{baseUrl}}/notifications",
              "host": ["{{baseUrl}}"],
              "path": ["notifications"]
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"type\": \"SYSTEM\",\n  \"title\": \"New Feature Announcement\",\n  \"content\": \"We've added a new dashboard feature to help you track your progress.\",\n  \"link\": \"/features/dashboard\",\n  \"image\": \"https://example.com/images/feature-dashboard.png\",\n  \"metadata\": {\n    \"featureId\": \"dashboard-v2\",\n    \"releaseVersion\": \"2.5.0\"\n  },\n  \"isGlobal\": true,\n  \"priority\": 2,\n  \"validUntil\": \"2023-12-31T23:59:59Z\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Created notification has correct data\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData.title).to.eql(\"New Feature Announcement\");",
                  "    pm.expect(jsonData.type).to.eql(\"SYSTEM\");",
                  "    ",
                  "    // Store the notification ID for later use",
                  "    pm.collectionVariables.set(\"notificationId\", jsonData.id);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Notification",
          "request": {
            "method": "PATCH",
            "url": {
              "raw": "{{baseUrl}}/notifications/:id",
              "host": ["{{baseUrl}}"],
              "path": ["notifications", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "{{notificationId}}",
                  "description": "ID of the notification to update"
                }
              ]
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Updated Feature Announcement\",\n  \"content\": \"We've improved our new dashboard feature based on your feedback.\",\n  \"priority\": 3\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Notification was updated correctly\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.title).to.eql(\"Updated Feature Announcement\");",
                  "    pm.expect(jsonData.priority).to.eql(3);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Delete Notification",
          "request": {
            "method": "DELETE",
            "url": {
              "raw": "{{baseUrl}}/notifications/:id",
              "host": ["{{baseUrl}}"],
              "path": ["notifications", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "{{notificationId}}",
                  "description": "ID of the notification to delete"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 204\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "User Notifications",
      "item": [
        {
          "name": "Get User Notifications",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/user-notifications?userId=user-123456&status=UNREAD",
              "host": ["{{baseUrl}}"],
              "path": ["user-notifications"],
              "query": [
                {
                  "key": "userId",
                  "value": "user-123456"
                },
                {
                  "key": "status",
                  "value": "UNREAD"
                },
                {
                  "key": "page",
                  "value": "1",
                  "disabled": true
                },
                {
                  "key": "limit",
                  "value": "10",
                  "disabled": true
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Mark as Read",
          "request": {
            "method": "PATCH",
            "url": {
              "raw": "{{baseUrl}}/user-notifications/:id/read",
              "host": ["{{baseUrl}}"],
              "path": ["user-notifications", ":id", "read"],
              "variable": [
                {
                  "key": "id",
                  "value": "user-notification-id",
                  "description": "ID of the user notification"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Archive Notification",
          "request": {
            "method": "PATCH",
            "url": {
              "raw": "{{baseUrl}}/user-notifications/:id/archive",
              "host": ["{{baseUrl}}"],
              "path": ["user-notifications", ":id", "archive"],
              "variable": [
                {
                  "key": "id",
                  "value": "user-notification-id",
                  "description": "ID of the user notification"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Mark as Favorite",
          "request": {
            "method": "PATCH",
            "url": {
              "raw": "{{baseUrl}}/user-notifications/:id/favorite",
              "host": ["{{baseUrl}}"],
              "path": ["user-notifications", ":id", "favorite"],
              "variable": [
                {
                  "key": "id",
                  "value": "user-notification-id",
                  "description": "ID of the user notification"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"isFavorite\": true\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Bulk Update Notifications",
          "request": {
            "method": "PATCH",
            "url": {
              "raw": "{{baseUrl}}/user-notifications/bulk",
              "host": ["{{baseUrl}}"],
              "path": ["user-notifications", "bulk"]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"ids\": [\"notification-id-1\", \"notification-id-2\"],\n  \"status\": \"READ\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "User Preferences",
      "item": [
        {
          "name": "Get User Preferences",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/user-preferences?userId=user-123456",
              "host": ["{{baseUrl}}"],
              "path": ["user-preferences"],
              "query": [
                {
                  "key": "userId",
                  "value": "user-123456"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Update User Preference",
          "request": {
            "method": "PATCH",
            "url": {
              "raw": "{{baseUrl}}/user-preferences/:id",
              "host": ["{{baseUrl}}"],
              "path": ["user-preferences", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "preference-id",
                  "description": "ID of the user preference"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"enabled\": false,\n  \"channel\": [\"EMAIL\"],\n  \"muteUntil\": \"2023-12-31T23:59:59Z\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Create User Preference",
          "request": {
            "method": "POST",
            "url": {
              "raw": "{{baseUrl}}/user-preferences",
              "host": ["{{baseUrl}}"],
              "path": ["user-preferences"]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": \"user-123456\",\n  \"type\": \"SYSTEM\",\n  \"channel\": [\"EMAIL\", \"IN_APP\"],\n  \"enabled\": true\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    }
  ]
}
